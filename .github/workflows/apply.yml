name: Apply

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

jobs:

  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "${{ secrets.ROLE_ARN }}"
          role-session-name: github-actions-session
          aws-region: eu-west-2

      - name: Terraform validate
        run: |
          terraform init
          terraform fmt -check
          terraform validate

      - name: Linting
        uses: terraform-linters/setup-tflint@v4
      - run: |
          tflint --init
          tflint

      - name: Checkov Scan
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./terraform
          check: CKV_AWS_1,CKV_AWS_2,CKV_AWS_41
          soft_fail: true

      - name: Terraform Apply
        run: |
          terraform plan
          terraform apply -auto-approve

      - name: Wait for EKS Cluster
        run: |
          aws eks wait cluster-active --name eks-cluster --region eu-west-2

  argo-deploy:
    name: Argo Deploy
    runs-on: ubuntu-latest
    needs: terraform
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "${{ secrets.ROLE_ARN }}"
          role-session-name: github-actions-session
          aws-region: eu-west-2

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region eu-west-2 --name eks-cluster
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Issuer
        run: kubectl apply -f cert-man/issuer.yaml
   

      - name: Deploy application
        run: |
          kubectl apply -f argo-cd/argo-cd.yaml    
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argo-cd
  
      - name: Apply manifests
        run: kubectl apply -f argo-cd/manifests/deployment.yaml

      - name: Decode password
        run: kubectl -n argo-cd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d || echo "Secret not found"
